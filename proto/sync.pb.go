// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sync.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Test message essentially is an echo that can be used to verify a test response
type Test struct {
	// name should be used as an echo
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Test) Reset()         { *m = Test{} }
func (m *Test) String() string { return proto.CompactTextString(m) }
func (*Test) ProtoMessage()    {}
func (*Test) Descriptor() ([]byte, []int) {
	return fileDescriptor_5273b98214de8075, []int{0}
}

func (m *Test) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Test.Unmarshal(m, b)
}
func (m *Test) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Test.Marshal(b, m, deterministic)
}
func (m *Test) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Test.Merge(m, src)
}
func (m *Test) XXX_Size() int {
	return xxx_messageInfo_Test.Size(m)
}
func (m *Test) XXX_DiscardUnknown() {
	xxx_messageInfo_Test.DiscardUnknown(m)
}

var xxx_messageInfo_Test proto.InternalMessageInfo

func (m *Test) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// singular artist for a track
type Artist struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Artist) Reset()         { *m = Artist{} }
func (m *Artist) String() string { return proto.CompactTextString(m) }
func (*Artist) ProtoMessage()    {}
func (*Artist) Descriptor() ([]byte, []int) {
	return fileDescriptor_5273b98214de8075, []int{1}
}

func (m *Artist) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Artist.Unmarshal(m, b)
}
func (m *Artist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Artist.Marshal(b, m, deterministic)
}
func (m *Artist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Artist.Merge(m, src)
}
func (m *Artist) XXX_Size() int {
	return xxx_messageInfo_Artist.Size(m)
}
func (m *Artist) XXX_DiscardUnknown() {
	xxx_messageInfo_Artist.DiscardUnknown(m)
}

var xxx_messageInfo_Artist proto.InternalMessageInfo

func (m *Artist) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// track composed of it's name and the artists associated
type Track struct {
	Name                 string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Artists              []*Artist `protobuf:"bytes,2,rep,name=artists,proto3" json:"artists,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Track) Reset()         { *m = Track{} }
func (m *Track) String() string { return proto.CompactTextString(m) }
func (*Track) ProtoMessage()    {}
func (*Track) Descriptor() ([]byte, []int) {
	return fileDescriptor_5273b98214de8075, []int{2}
}

func (m *Track) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Track.Unmarshal(m, b)
}
func (m *Track) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Track.Marshal(b, m, deterministic)
}
func (m *Track) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Track.Merge(m, src)
}
func (m *Track) XXX_Size() int {
	return xxx_messageInfo_Track.Size(m)
}
func (m *Track) XXX_DiscardUnknown() {
	xxx_messageInfo_Track.DiscardUnknown(m)
}

var xxx_messageInfo_Track proto.InternalMessageInfo

func (m *Track) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Track) GetArtists() []*Artist {
	if m != nil {
		return m.Artists
	}
	return nil
}

// SpotifyPlaylist can be used to retrieve tracks from the spotify playlist id
type SpotifyPlaylist struct {
	Tracks               []*Track `protobuf:"bytes,1,rep,name=tracks,proto3" json:"tracks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpotifyPlaylist) Reset()         { *m = SpotifyPlaylist{} }
func (m *SpotifyPlaylist) String() string { return proto.CompactTextString(m) }
func (*SpotifyPlaylist) ProtoMessage()    {}
func (*SpotifyPlaylist) Descriptor() ([]byte, []int) {
	return fileDescriptor_5273b98214de8075, []int{3}
}

func (m *SpotifyPlaylist) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpotifyPlaylist.Unmarshal(m, b)
}
func (m *SpotifyPlaylist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpotifyPlaylist.Marshal(b, m, deterministic)
}
func (m *SpotifyPlaylist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpotifyPlaylist.Merge(m, src)
}
func (m *SpotifyPlaylist) XXX_Size() int {
	return xxx_messageInfo_SpotifyPlaylist.Size(m)
}
func (m *SpotifyPlaylist) XXX_DiscardUnknown() {
	xxx_messageInfo_SpotifyPlaylist.DiscardUnknown(m)
}

var xxx_messageInfo_SpotifyPlaylist proto.InternalMessageInfo

func (m *SpotifyPlaylist) GetTracks() []*Track {
	if m != nil {
		return m.Tracks
	}
	return nil
}

func init() {
	proto.RegisterType((*Test)(nil), "protos.Test")
	proto.RegisterType((*Artist)(nil), "protos.artist")
	proto.RegisterType((*Track)(nil), "protos.track")
	proto.RegisterType((*SpotifyPlaylist)(nil), "protos.SpotifyPlaylist")
}

func init() { proto.RegisterFile("sync.proto", fileDescriptor_5273b98214de8075) }

var fileDescriptor_5273b98214de8075 = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x41, 0x4e, 0x83, 0x40,
	0x14, 0x86, 0x0b, 0x16, 0x88, 0x4f, 0xd1, 0x64, 0x16, 0x4a, 0xc6, 0x2e, 0xc8, 0x24, 0x26, 0xac,
	0x18, 0x53, 0x5d, 0x78, 0x01, 0xd2, 0xad, 0xa1, 0x5e, 0x60, 0xda, 0x4c, 0x09, 0x11, 0x18, 0xc2,
	0x3c, 0x17, 0x6c, 0xbd, 0x82, 0x7b, 0x2f, 0xe5, 0x15, 0x3c, 0x88, 0x61, 0x06, 0x16, 0xad, 0xb6,
	0x2b, 0x78, 0xf3, 0xbd, 0xff, 0xfd, 0xf3, 0xbf, 0x0c, 0x80, 0xee, 0x9b, 0x6d, 0xda, 0x76, 0x0a,
	0x15, 0xf1, 0xcd, 0x47, 0xd3, 0x45, 0xa1, 0x54, 0x51, 0x49, 0x2e, 0xda, 0x92, 0x8b, 0xa6, 0x51,
	0x28, 0xb0, 0x54, 0x8d, 0xb6, 0x5d, 0xf4, 0x6e, 0xa4, 0xa6, 0xda, 0xbc, 0xef, 0xb8, 0xac, 0x5b,
	0xec, 0x2d, 0x64, 0x14, 0xe6, 0xaf, 0x52, 0x23, 0x21, 0x30, 0x6f, 0x44, 0x2d, 0x23, 0x27, 0x76,
	0x92, 0xf3, 0xdc, 0xfc, 0xb3, 0x05, 0xf8, 0xa2, 0xc3, 0xf2, 0x08, 0xcd, 0xc0, 0xc3, 0x4e, 0x6c,
	0xdf, 0xfe, 0x83, 0x24, 0x81, 0xc0, 0x4a, 0x75, 0xe4, 0xc6, 0x67, 0xc9, 0xc5, 0xf2, 0xca, 0xfa,
	0xe9, 0xd4, 0x1e, 0xe7, 0x13, 0x66, 0xcf, 0x70, 0xbd, 0x6e, 0x15, 0x96, 0xbb, 0xfe, 0xa5, 0x12,
	0x7d, 0x35, 0xb8, 0xdd, 0x83, 0x6f, 0x26, 0xeb, 0xc8, 0x31, 0xda, 0x70, 0xd2, 0x9a, 0xd3, 0x7c,
	0x84, 0xcb, 0x2f, 0x17, 0xbc, 0xe1, 0xee, 0x9a, 0x3c, 0x41, 0xb0, 0x92, 0x68, 0x72, 0x5c, 0x4e,
	0xbd, 0x43, 0x45, 0xf7, 0x2a, 0x16, 0x7e, 0x7c, 0xff, 0x7c, 0xba, 0x01, 0xf1, 0x38, 0x0e, 0xad,
	0x05, 0x90, 0x95, 0xc4, 0x43, 0xf3, 0x9b, 0xd4, 0xae, 0x2b, 0x9d, 0xd6, 0x95, 0x66, 0xc3, 0xba,
	0xe8, 0xed, 0x34, 0xea, 0x40, 0xc0, 0x62, 0x33, 0x95, 0x92, 0x88, 0x6b, 0x4b, 0x78, 0x3b, 0x22,
	0x6e, 0x2f, 0x4a, 0x32, 0x88, 0xfe, 0x1a, 0xad, 0xb1, 0x93, 0xa2, 0x3e, 0x6a, 0xb7, 0x9f, 0x99,
	0xcd, 0x1e, 0x1c, 0xc2, 0x21, 0x1c, 0x53, 0x8e, 0xda, 0x53, 0x59, 0x67, 0x89, 0xb3, 0xb1, 0xcf,
	0xe3, 0xf1, 0x37, 0x00, 0x00, 0xff, 0xff, 0x36, 0xec, 0x35, 0x0e, 0x33, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestsClient is the client API for Tests service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestsClient interface {
	// Stub test
	GetTest(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error)
	//  Get some test tracks from spotify that will eventually be synced
	GetSpotifyPlaylist(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SpotifyPlaylist, error)
	// Test for server-side streaming
	GetSpotifyPlaylistStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Tests_GetSpotifyPlaylistStreamClient, error)
	// Test for client-side streaming
	GetTestStream(ctx context.Context, opts ...grpc.CallOption) (Tests_GetTestStreamClient, error)
}

type testsClient struct {
	cc *grpc.ClientConn
}

func NewTestsClient(cc *grpc.ClientConn) TestsClient {
	return &testsClient{cc}
}

func (c *testsClient) GetTest(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error) {
	out := new(Test)
	err := c.cc.Invoke(ctx, "/protos.Tests/GetTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testsClient) GetSpotifyPlaylist(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SpotifyPlaylist, error) {
	out := new(SpotifyPlaylist)
	err := c.cc.Invoke(ctx, "/protos.Tests/GetSpotifyPlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testsClient) GetSpotifyPlaylistStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Tests_GetSpotifyPlaylistStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Tests_serviceDesc.Streams[0], "/protos.Tests/GetSpotifyPlaylistStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testsGetSpotifyPlaylistStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tests_GetSpotifyPlaylistStreamClient interface {
	Recv() (*Track, error)
	grpc.ClientStream
}

type testsGetSpotifyPlaylistStreamClient struct {
	grpc.ClientStream
}

func (x *testsGetSpotifyPlaylistStreamClient) Recv() (*Track, error) {
	m := new(Track)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testsClient) GetTestStream(ctx context.Context, opts ...grpc.CallOption) (Tests_GetTestStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Tests_serviceDesc.Streams[1], "/protos.Tests/GetTestStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testsGetTestStreamClient{stream}
	return x, nil
}

type Tests_GetTestStreamClient interface {
	Send(*Test) error
	CloseAndRecv() (*Test, error)
	grpc.ClientStream
}

type testsGetTestStreamClient struct {
	grpc.ClientStream
}

func (x *testsGetTestStreamClient) Send(m *Test) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testsGetTestStreamClient) CloseAndRecv() (*Test, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Test)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestsServer is the server API for Tests service.
type TestsServer interface {
	// Stub test
	GetTest(context.Context, *Test) (*Test, error)
	//  Get some test tracks from spotify that will eventually be synced
	GetSpotifyPlaylist(context.Context, *empty.Empty) (*SpotifyPlaylist, error)
	// Test for server-side streaming
	GetSpotifyPlaylistStream(*empty.Empty, Tests_GetSpotifyPlaylistStreamServer) error
	// Test for client-side streaming
	GetTestStream(Tests_GetTestStreamServer) error
}

func RegisterTestsServer(s *grpc.Server, srv TestsServer) {
	s.RegisterService(&_Tests_serviceDesc, srv)
}

func _Tests_GetTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestsServer).GetTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Tests/GetTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestsServer).GetTest(ctx, req.(*Test))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tests_GetSpotifyPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestsServer).GetSpotifyPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Tests/GetSpotifyPlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestsServer).GetSpotifyPlaylist(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tests_GetSpotifyPlaylistStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestsServer).GetSpotifyPlaylistStream(m, &testsGetSpotifyPlaylistStreamServer{stream})
}

type Tests_GetSpotifyPlaylistStreamServer interface {
	Send(*Track) error
	grpc.ServerStream
}

type testsGetSpotifyPlaylistStreamServer struct {
	grpc.ServerStream
}

func (x *testsGetSpotifyPlaylistStreamServer) Send(m *Track) error {
	return x.ServerStream.SendMsg(m)
}

func _Tests_GetTestStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestsServer).GetTestStream(&testsGetTestStreamServer{stream})
}

type Tests_GetTestStreamServer interface {
	SendAndClose(*Test) error
	Recv() (*Test, error)
	grpc.ServerStream
}

type testsGetTestStreamServer struct {
	grpc.ServerStream
}

func (x *testsGetTestStreamServer) SendAndClose(m *Test) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testsGetTestStreamServer) Recv() (*Test, error) {
	m := new(Test)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Tests_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Tests",
	HandlerType: (*TestsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTest",
			Handler:    _Tests_GetTest_Handler,
		},
		{
			MethodName: "GetSpotifyPlaylist",
			Handler:    _Tests_GetSpotifyPlaylist_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSpotifyPlaylistStream",
			Handler:       _Tests_GetSpotifyPlaylistStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTestStream",
			Handler:       _Tests_GetTestStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "sync.proto",
}
