// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cshealy/sync-sandbox/proto (interfaces: TestsClient)

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	protos "github.com/cshealy/sync-sandbox/proto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

// MockTestsClient is a mock of TestsClient interface
type MockTestsClient struct {
	ctrl     *gomock.Controller
	recorder *MockTestsClientMockRecorder
}

// MockTestsClientMockRecorder is the mock recorder for MockTestsClient
type MockTestsClientMockRecorder struct {
	mock *MockTestsClient
}

// NewMockTestsClient creates a new mock instance
func NewMockTestsClient(ctrl *gomock.Controller) *MockTestsClient {
	mock := &MockTestsClient{ctrl: ctrl}
	mock.recorder = &MockTestsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTestsClient) EXPECT() *MockTestsClientMockRecorder {
	return m.recorder
}

// GetBidirectionalStream mocks base method
func (m *MockTestsClient) GetBidirectionalStream(arg0 context.Context, arg1 ...grpc.CallOption) (protos.Tests_GetBidirectionalStreamClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBidirectionalStream", varargs...)
	ret0, _ := ret[0].(protos.Tests_GetBidirectionalStreamClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBidirectionalStream indicates an expected call of GetBidirectionalStream
func (mr *MockTestsClientMockRecorder) GetBidirectionalStream(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBidirectionalStream", reflect.TypeOf((*MockTestsClient)(nil).GetBidirectionalStream), varargs...)
}

// GetClientStream mocks base method
func (m *MockTestsClient) GetClientStream(arg0 context.Context, arg1 ...grpc.CallOption) (protos.Tests_GetClientStreamClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClientStream", varargs...)
	ret0, _ := ret[0].(protos.Tests_GetClientStreamClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientStream indicates an expected call of GetClientStream
func (mr *MockTestsClientMockRecorder) GetClientStream(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientStream", reflect.TypeOf((*MockTestsClient)(nil).GetClientStream), varargs...)
}

// GetSpotifyPlaylist mocks base method
func (m *MockTestsClient) GetSpotifyPlaylist(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*protos.SpotifyPlaylist, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSpotifyPlaylist", varargs...)
	ret0, _ := ret[0].(*protos.SpotifyPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpotifyPlaylist indicates an expected call of GetSpotifyPlaylist
func (mr *MockTestsClientMockRecorder) GetSpotifyPlaylist(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpotifyPlaylist", reflect.TypeOf((*MockTestsClient)(nil).GetSpotifyPlaylist), varargs...)
}

// GetSpotifyPlaylistStream mocks base method
func (m *MockTestsClient) GetSpotifyPlaylistStream(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (protos.Tests_GetSpotifyPlaylistStreamClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSpotifyPlaylistStream", varargs...)
	ret0, _ := ret[0].(protos.Tests_GetSpotifyPlaylistStreamClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpotifyPlaylistStream indicates an expected call of GetSpotifyPlaylistStream
func (mr *MockTestsClientMockRecorder) GetSpotifyPlaylistStream(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpotifyPlaylistStream", reflect.TypeOf((*MockTestsClient)(nil).GetSpotifyPlaylistStream), varargs...)
}

// GetTest mocks base method
func (m *MockTestsClient) GetTest(arg0 context.Context, arg1 *protos.Test, arg2 ...grpc.CallOption) (*protos.Test, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTest", varargs...)
	ret0, _ := ret[0].(*protos.Test)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTest indicates an expected call of GetTest
func (mr *MockTestsClientMockRecorder) GetTest(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTest", reflect.TypeOf((*MockTestsClient)(nil).GetTest), varargs...)
}
